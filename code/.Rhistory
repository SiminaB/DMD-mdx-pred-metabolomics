listDatasets(ensembl)
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL")
listDatasets(ensembl)
sessionInfo()
seq(0,1,0.1)
citation()
load("C:/Users/Simina/Documents/GitHub/nfpm/General_interface/code/database_inputs_to_app.RData")
head(Onc_df)
##rename KEGG_cancer_paths_onc_long to Onc_df
Onc_df <- KEGG_cancer_paths_onc_long
head(Onc_df)
head(drugs_PO_FDA_biomarkers)
library(devtools)
install_github('AI1013/popadmix-pkg', subdir="R_pkg/")
setwd("C:/Users/Simina/Dropbox/Research/Metabolomics/DMD mdx corticosteroids/urine_code_for_reproducibility/code")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, fig.path = "figures/")
# Chunk 2: chunk1
library(dplyr)
library(reshape2)
library(ggplot2)
library(nlme)
library(qvalue)
library(car)
source("functions.R")
# Chunk 3: chunk2
MasterFrame <- read.delim(file="../data/Supplemental Table 1.tsv",
header=TRUE,
sep="\t",
check.names=FALSE)
# Chunk 4: chunk3
##first take out the QC samples
MasterFrameNoQC <- MasterFrame[MasterFrame$SampleID != "QC",]
##only include interaction terms between Times T1/T2 and Group variables (since just one group 2 at baseline)
MasterFrameNoQC$TimeT1 <- MasterFrameNoQC$TimeT2 <-
MasterFrameNoQC$GenoMDX <-
MasterFrameNoQC$GroupPred <-
rep(0, nrow(MasterFrameNoQC))
MasterFrameNoQC$TimeT1[MasterFrameNoQC$Time=="T1"] <- 1
MasterFrameNoQC$TimeT2[MasterFrameNoQC$Time=="T2"] <- 1
MasterFrameNoQC$GenoMDX[MasterFrameNoQC$Genotype=="mdx23"] <- 1
MasterFrameNoQC$GroupPred[MasterFrameNoQC$Group=="group 1"] <- 1
dim(MasterFrame)
dim(MasterFrameNoQC)
# Chunk 5
##get metabolites
mets <- colnames(MasterFrameNoQC)[grep("m/z",colnames(MasterFrameNoQC))]
##actually look at top 75% most variable metabolites
##metsMostVar <- names(sort(sapply(MasterFrameNoQC[,mets],var))[round(0.25*length(mets)):length(mets)])
##mets <- metsMostVar
MasterFrame_T0 <- subset(MasterFrameNoQC, Time=="T0")
##remove any metabolites with variance = 0
var0 <- names(which(apply(MasterFrame_T0[,mets],2,var)==0))
var0
##look at this peak!
unique(MasterFrame_T0[,var0])
MasterFrame_T0 <- select(MasterFrame_T0, -one_of(var0))
mets <- setdiff(mets, var0)
length(mets)
# Chunk 6
levene_test <- lapply(MasterFrame_T0[,mets],
function(metInt, geno){
leveneTest(lm(metInt~geno))[["Pr(>F)"]][1]
},
MasterFrame_T0$Genotype)
head(as.numeric(levene_test))
hist(as.numeric(levene_test), col="grey")
# Chunk 7
qvalue(as.numeric(levene_test))$pi0
# Chunk 8: chunk4_equal_var
t_tests_equal <- lapply(MasterFrame_T0[,mets],
function(metInt, geno){
t.test(metInt[geno==1],metInt[geno==0],
var.equal=TRUE)
},
MasterFrame_T0$GenoMDX)
# Chunk 9: chunk4_diff_var
t_tests_diff <- lapply(MasterFrame_T0[,mets],
function(metInt, geno){
t.test(metInt[geno==1],metInt[geno==0],
var.equal=FALSE)
},
MasterFrame_T0$GenoMDX)
# Chunk 10: chunk5
p_vals_equal <- sapply(t_tests_equal, function(t){t$p.value})
p_vals_diff <- sapply(t_tests_diff, function(t){t$p.value})
cor(p_vals_equal, p_vals_diff)
plot(p_vals_equal, p_vals_diff)
sum(p_vals_diff <= 0.05/length(p_vals_diff))
p_vals <- p_vals_equal
t_tests_equal[[1]]
t_tests_equal[[1]]$df
names(t_tests_equal[[1]])
t_tests_equal[[1]]$statistic
t_tests_equal[[1]]$parameter
t_tests_equal[[1]]$p.value
t_tests_equal[[1]]$conf.int
t_tests_equal[[1]]$estimate
t_tests_equal[[1]]$data.name
t_tests_equal[[1]]$null.value
t_tests_equal[[1]]$alternative
t_tests_equal[[1]]$conf.int[1,]
t_tests_equal[[1]]$conf.int[1]
t_tests_equal[[1]]$conf.int[2]
t_tests_equal[[1]]$conf.int
DFs <- sapply(t_tests_equal, function(t){t$parameter})
t_stats <- sapply(t_tests_equal, function(t){t$statistic})
CI95_lower <- sapply(t_tests_equal, function(t){t$conf.int[1]})
CI95_upper <- sapply(t_tests_equal, function(t){t$conf.int[2]})
DFs
t_stats[1:5]
CI95_lower[1:5]
CI95_upper[1:5]
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, fig.path = "figures/")
# Chunk 2: chunk1
library(dplyr)
library(reshape2)
library(ggplot2)
library(nlme)
library(qvalue)
library(car)
source("functions.R")
# Chunk 3: chunk2
MasterFrame <- read.delim(file="../data/Supplemental Table 1.tsv",
header=TRUE,
sep="\t",
check.names=FALSE)
# Chunk 4: chunk3
##first take out the QC samples
MasterFrameNoQC <- MasterFrame[MasterFrame$SampleID != "QC",]
##only include interaction terms between Times T1/T2 and Group variables (since just one group 2 at baseline)
MasterFrameNoQC$TimeT1 <- MasterFrameNoQC$TimeT2 <-
MasterFrameNoQC$GenoMDX <-
MasterFrameNoQC$GroupPred <-
rep(0, nrow(MasterFrameNoQC))
MasterFrameNoQC$TimeT1[MasterFrameNoQC$Time=="T1"] <- 1
MasterFrameNoQC$TimeT2[MasterFrameNoQC$Time=="T2"] <- 1
MasterFrameNoQC$GenoMDX[MasterFrameNoQC$Genotype=="mdx23"] <- 1
MasterFrameNoQC$GroupPred[MasterFrameNoQC$Group=="group 1"] <- 1
dim(MasterFrame)
dim(MasterFrameNoQC)
# Chunk 5
##get metabolites
mets <- colnames(MasterFrameNoQC)[grep("m/z",colnames(MasterFrameNoQC))]
##actually look at top 75% most variable metabolites
##metsMostVar <- names(sort(sapply(MasterFrameNoQC[,mets],var))[round(0.25*length(mets)):length(mets)])
##mets <- metsMostVar
MasterFrame_T0 <- subset(MasterFrameNoQC, Time=="T0")
##remove any metabolites with variance = 0
var0 <- names(which(apply(MasterFrame_T0[,mets],2,var)==0))
var0
##look at this peak!
unique(MasterFrame_T0[,var0])
MasterFrame_T0 <- select(MasterFrame_T0, -one_of(var0))
mets <- setdiff(mets, var0)
length(mets)
# Chunk 6
levene_test <- lapply(MasterFrame_T0[,mets],
function(metInt, geno){
leveneTest(lm(metInt~geno))[["Pr(>F)"]][1]
},
MasterFrame_T0$Genotype)
head(as.numeric(levene_test))
hist(as.numeric(levene_test), col="grey")
# Chunk 7
qvalue(as.numeric(levene_test))$pi0
# Chunk 8: chunk4_equal_var
t_tests_equal <- lapply(MasterFrame_T0[,mets],
function(metInt, geno){
t.test(metInt[geno==1],metInt[geno==0],
var.equal=TRUE)
},
MasterFrame_T0$GenoMDX)
# Chunk 9: chunk4_diff_var
t_tests_diff <- lapply(MasterFrame_T0[,mets],
function(metInt, geno){
t.test(metInt[geno==1],metInt[geno==0],
var.equal=FALSE)
},
MasterFrame_T0$GenoMDX)
# Chunk 10: chunk5
p_vals_equal <- sapply(t_tests_equal, function(t){t$p.value})
p_vals_diff <- sapply(t_tests_diff, function(t){t$p.value})
cor(p_vals_equal, p_vals_diff)
plot(p_vals_equal, p_vals_diff)
sum(p_vals_diff <= 0.05/length(p_vals_diff))
p_vals <- p_vals_equal
# Chunk 11
DFs <- sapply(t_tests_equal, function(t){t$parameter})
t_stats <- sapply(t_tests_equal, function(t){t$statistic})
CI95_lower <- sapply(t_tests_equal, function(t){t$conf.int[1]})
CI95_upper <- sapply(t_tests_equal, function(t){t$conf.int[2]})
# Chunk 12: chunk6
hist(p_vals, col="grey")
qvalue(p_vals)$pi0
round((1-qvalue(p_vals)$pi0)*100)
sum(p_vals < 0.05/length(p_vals))
# Chunk 13: chunk7
mets_114 <- names(p_vals)[grep("m/z = 114\\.(0|1)",names(p_vals))]
mets_114 <- mets_114[grep("Positive",mets_114)]
p_vals[mets_114]
mets_132 <- names(p_vals)[grep("m/z = 132\\.(0|1)",names(p_vals))]
mets_132 <- mets_132[grep("Positive",mets_132)]
p_vals[mets_132]
# Chunk 14: chunk8
met_top <- names(sort(p_vals))[1]
met_top
met_creatinine <- mets_114
met_creatinine
met_creatine <- mets_132[grep("132.077",mets_132)]
met_creatine
met_hypusine <- "m/z = 234.18087, mode = Positive, RT = 19.39639"
met_biliverdin <- "m/z = 583.25604, mode = Positive, RT = 381.06653"
met_484 <- "m/z = 484.16091, mode = Negative, RT = 155.62501"
met_885 <- "m/z = 884.92954, mode = Positive, RT = 231.26267"
met_229 <- "m/z = 229.15522, mode = Positive, RT = 25.16714"
# Chunk 15
MasterFrame_T0$Genotype <- as.character(MasterFrame_T0$Genotype)
MasterFrame_T0$Genotype[MasterFrame_T0$Genotype == "mdx23"] <- "mdx"
# Chunk 16: boxplots_geno_T0
box1 <- ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_top,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
ggtitle("a)\nm/z = 357.25, Positive mode") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
box2 <- ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_creatinine,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
ggtitle("b)\nCreatinine") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
box3 <- ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_creatine,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
ggtitle("c)\nCreatine") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
box4 <- ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_hypusine,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
ggtitle("d)\nHypusine") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
box5 <- ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_biliverdin,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
ggtitle("e)\nBiliverdin") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
multiplot(box1, box2, box3, box4, box5, cols=5)
# Chunk 17: boxplots_geno_T0_Supp_2
ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_484,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
# Chunk 18: boxplots_geno_T0_Supp_3
ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_885,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
# Chunk 19: boxplots_met_229
ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_229,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
# Chunk 20
save(list=ls(), file = "../objs/stat_analysis_geno_T0.RData")
# Chunk 21
##see what rank creatine is at
rank(p_vals)[met_creatine]
p_vals[met_creatine]
p_vals[met_creatine]*length(p_vals)
p_vals <- sort(p_vals)
top_peaks <- names(which(rank(p_vals)<=50))
p_vals_top_peaks <- p_vals[top_peaks]
info_top_peaks <- strsplit(top_peaks, ", ")
mz_top_peaks <- as.numeric(gsub("m/z = ", "", sapply(info_top_peaks, function(x){x[1]})))
mode_top_peaks <- gsub("mode = ", "", sapply(info_top_peaks, function(x){x[2]}))
rt_top_peaks <- as.numeric(gsub("RT = ", "", sapply(info_top_peaks, function(x){x[3]})))
##also get difference in means
log2_fold_change <- sapply(t_tests_equal, function(t){means <- t$estimate; means[1]-means[2]})
names(log2_fold_change) <- names(t_tests_equal)
head(DFs)
DFs[top_peaks]
head(top_peaks)
head(colnames(DFs))
head(names(DFs))
length(DFs)
class(DFs)
DFs[top_peaks[]]
DFs[top_peaks[1]]
top_peaks[1]
head(names(DFs))
top_peaks[1]
t_tests_equal[[1]]$parameter
t_tests_equal[[1]]$parameter[1]
t_tests_equal[[1]]$parameter$df
t_tests_equal[[1]]$parameter["df"]
as.numeric(t_tests_equal[[1]]$parameter)
as.numeric(t_tests_equal[[1]]$statistic)
t_tests_equal[[1]]$statistic
top_peaks[1]
top_peaks[12]
t_tests_equal[[top_peaks[2]]]
t_tests_equal[["m/z = 705.18365, mode = Positive, RT = 21.72841"]
]
t_tests_equal[["m/z = 705.18365, mode = Positive, RT = 21.72841"]]
t_tests_equal[[top_peaks[2]]]
t_tests_equal[["m/z = 705.18365, mode = Positive, RT = 21.72841"]]
t_tests_equal[[top_peaks[12]]]
t_tests_equal[[top_peaks[12]]]$estimate
-5.015655-(-6.742024)
View(t_tests_diff)
setwd("C:/Users/Simina/Dropbox/Research/Metabolomics/DMD mdx corticosteroids/urine_code_for_reproducibility/code")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, fig.path = "../figures/")
# Chunk 2: chunk1
library(dplyr)
library(reshape2)
library(ggplot2)
library(nlme)
library(qvalue)
library(car)
source("functions.R")
# Chunk 3: chunk2
MasterFrame <- read.delim(file="../data/Supplemental Table 1.tsv",
header=TRUE,
sep="\t",
check.names=FALSE)
# Chunk 4: chunk3
##first take out the QC samples
MasterFrameNoQC <- MasterFrame[MasterFrame$SampleID != "QC",]
##only include interaction terms between Times T1/T2 and Group variables (since just one group 2 at baseline)
MasterFrameNoQC$TimeT1 <- MasterFrameNoQC$TimeT2 <-
MasterFrameNoQC$GenoMDX <-
MasterFrameNoQC$GroupPred <-
rep(0, nrow(MasterFrameNoQC))
MasterFrameNoQC$TimeT1[MasterFrameNoQC$Time=="T1"] <- 1
MasterFrameNoQC$TimeT2[MasterFrameNoQC$Time=="T2"] <- 1
MasterFrameNoQC$GenoMDX[MasterFrameNoQC$Genotype=="mdx23"] <- 1
MasterFrameNoQC$GroupPred[MasterFrameNoQC$Group=="group 1"] <- 1
dim(MasterFrame)
dim(MasterFrameNoQC)
# Chunk 5
##get metabolites
mets <- colnames(MasterFrameNoQC)[grep("m/z",colnames(MasterFrameNoQC))]
##actually look at top 75% most variable metabolites
##metsMostVar <- names(sort(sapply(MasterFrameNoQC[,mets],var))[round(0.25*length(mets)):length(mets)])
##mets <- metsMostVar
MasterFrame_T0 <- subset(MasterFrameNoQC, Time=="T0")
##remove any metabolites with variance = 0
var0 <- names(which(apply(MasterFrame_T0[,mets],2,var)==0))
var0
##look at this peak!
unique(MasterFrame_T0[,var0])
MasterFrame_T0 <- select(MasterFrame_T0, -one_of(var0))
mets <- setdiff(mets, var0)
length(mets)
# Chunk 6
levene_test <- lapply(MasterFrame_T0[,mets],
function(metInt, geno){
leveneTest(lm(metInt~geno))[["Pr(>F)"]][1]
},
MasterFrame_T0$Genotype)
head(as.numeric(levene_test))
hist(as.numeric(levene_test), col="grey")
# Chunk 7
qvalue(as.numeric(levene_test))$pi0
# Chunk 8: chunk4_equal_var
t_tests_equal <- lapply(MasterFrame_T0[,mets],
function(metInt, geno){
t.test(metInt[geno==1],metInt[geno==0],
var.equal=TRUE)
},
MasterFrame_T0$GenoMDX)
# Chunk 9: chunk4_diff_var
t_tests_diff <- lapply(MasterFrame_T0[,mets],
function(metInt, geno){
t.test(metInt[geno==1],metInt[geno==0],
var.equal=FALSE)
},
MasterFrame_T0$GenoMDX)
# Chunk 10: chunk5
p_vals_equal <- sapply(t_tests_equal, function(t){t$p.value})
p_vals_diff <- sapply(t_tests_diff, function(t){t$p.value})
cor(p_vals_equal, p_vals_diff)
plot(p_vals_equal, p_vals_diff)
sum(p_vals_diff <= 0.05/length(p_vals_diff))
p_vals <- p_vals_equal
# Chunk 11
DFs <- sapply(t_tests_equal, function(t){as.numeric(t$parameter)})
t_stats <- sapply(t_tests_equal, function(t){as.numeric(t$statistic)})
CI95_lower <- sapply(t_tests_equal, function(t){t$conf.int[1]})
CI95_upper <- sapply(t_tests_equal, function(t){t$conf.int[2]})
# Chunk 12: chunk6
hist(p_vals, col="grey")
qvalue(p_vals)$pi0
round((1-qvalue(p_vals)$pi0)*100)
sum(p_vals < 0.05/length(p_vals))
# Chunk 13: chunk7
mets_114 <- names(p_vals)[grep("m/z = 114\\.(0|1)",names(p_vals))]
mets_114 <- mets_114[grep("Positive",mets_114)]
p_vals[mets_114]
mets_132 <- names(p_vals)[grep("m/z = 132\\.(0|1)",names(p_vals))]
mets_132 <- mets_132[grep("Positive",mets_132)]
p_vals[mets_132]
# Chunk 14: chunk8
met_top <- names(sort(p_vals))[1]
met_top
met_creatinine <- mets_114
met_creatinine
met_creatine <- mets_132[grep("132.077",mets_132)]
met_creatine
met_hypusine <- "m/z = 234.18087, mode = Positive, RT = 19.39639"
met_biliverdin <- "m/z = 583.25604, mode = Positive, RT = 381.06653"
met_484 <- "m/z = 484.16091, mode = Negative, RT = 155.62501"
met_885 <- "m/z = 884.92954, mode = Positive, RT = 231.26267"
met_229 <- "m/z = 229.15522, mode = Positive, RT = 25.16714"
# Chunk 15
MasterFrame_T0$Genotype <- as.character(MasterFrame_T0$Genotype)
MasterFrame_T0$Genotype[MasterFrame_T0$Genotype == "mdx23"] <- "mdx"
box1 <- ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_top,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
ggtitle("a)\nm/z = 357.25, Positive mode") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
box2 <- ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_creatinine,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
##ylab("") +
ylab("Normalized, log2-transformed value") +
ggtitle("b)\nCreatinine") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust=0.5),
axis.title = element_text(size=13),
axis.text = element_text(size=12))
box3 <- ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_creatine,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
ggtitle("c)\nCreatine") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
box4 <- ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_hypusine,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
ggtitle("d)\nHypusine") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
box5 <- ggplot(MasterFrame_T0, aes_string(x="Genotype", y=paste("`",met_biliverdin,"`",sep=""))) +
geom_boxplot(fill="grey") +
geom_point() +
ylab("Normalized, log2-transformed value") +
ggtitle("e)\nBiliverdin") +
theme_bw() +
theme(plot.title = element_text(hjust=0.5))
multiplot(box1, box2, box3, box4, box5, cols=3)
multiplot(box1, box4, box2, box5, box3, cols=3)
*2/3
8*2/3
25/5
# Download pandoc 2.7.1 built with ghc-8.6.4, and instruct
# RStudio + rmarkdown to use it.
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
rm(list=ls())
?range
